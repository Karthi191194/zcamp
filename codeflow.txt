*laravel installation
*auth
*miidleware(keyword) - display "admin" page only to admin(requires login and needs to be admin)
*admin dashboard
*new project - insert form
*projects - list | listing all projects
*project update | updating existing projects
*delete
*ajax pagination - ajax pagination for projects list
*multi delete
*created resource controller, model, migration file for tasks
*tasks insert

*eapi - ecommerce api(https://www.udemy.com/laravel-e-commerce-restful-api/learn/v4/t/lecture/8890480?start=0)
-php artisan make:model eapi_model/Product -a - creates model, factory, migration, resource controller
-php artisan make:model eapi_model/Review -a
-route  api.php -21,22,25
-products table column creation | reviews table column creation | php artisan migrate - migrate both the tables
-faker setup for products, reviews | database seeder |  php artisan db:seed
-relationship Product, Reviews model
-tinker: php artisan tinker | App\eapi_model\Product::find(4) |
App\eapi_model\Product::find(4)->reviews - get reviews of product id 4
App\eapi_model\Review::find(4)->products - get product of review id
-API resource/transformer - When building an API, you may need a transformation layer that sits between your Eloquent models and the JSON responses that are actually returned to your application's users.
(the api will show the column name in reponse of each, if we change these column names on future the api will break so we are using transformers)
 php artisan make:resource Product/ProductCollection - resource collection
 php artisan make:resource Product/ProductResource - resource

*learning
*autocomplete

RELATIONSHIP
*One To One : product model - rel_reviews method, rel_products method.


*gallery
- created model, migration, controller files files php artisan migrate -mcr


*custom facades
eg:(default) cache::get()
flow 1.illuminate/support/facades/cache.php - facade
thn 3.illuminate/cache/cachemanager.php - class
thn 2.illuminate/cache/cacheserviceprovider
eg:(custom facade ours)
custom facades #1 - creating a class
custom facades #2  - exending facade
custom facades #3  - create a new file in the PROVIDERS folder.
custom facades #4  - add newly ceated provider and facade


*SERVICE PROVIDER

*Laravel JWT Authentication
//JWT Method 1
https://appdividend.com/2018/02/24/laravel-jwt-authentication-tutorial/
1.install the third-party jwtauth package by typing the following command. composer require tymon/jwt-auth
2.Update the config/app.php for JWT package
3.php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\JWTAuthServiceProvider"
-vendor:publish command used to copy few configuration file in your application from vendor package file
4.php artisan jwt:generate
5. register, login controller
6. include route middleware - kernel.php
7. routes in api.php
//JWT Method 2
exception inculded
https://jwt-auth.readthedocs.io
auth('api') - add on methods of controller, since we have set "web" for default on config/auth.php
rsponse()->json('TOKEN INVALID') - response as a JSON